namespace Bank.Logic;

// do not edit this file

public class Account
{
    public AccountSettings Settings { get; set; } = new();

    public int Id { get; set; } = default;

    public List<Transaction> Transactions { get; set; } = [];

    public double GetBalance() { return Transactions.Sum(t => t.Amount); }

    public IReadOnlyList<Transaction> GetTransactions() => Transactions.AsReadOnly();

    public bool TryAddTransaction(double amount, TransactionType transactionType)
    {
        if (transactionType.IndicatesSystemType())
        {
            return false;
        }

        if (Utilities.InidicatesNegativeAmount(transactionType) && !(amount < 0))
        {
            return false;
        }

        if (!Utilities.InidicatesNegativeAmount(transactionType) && (amount < 0))
        {
            return false;
        }

        Add(amount, transactionType);

        if (transactionType == TransactionType.Withdrawal && GetBalance() < 0)
        {
            Add(-Math.Abs(Settings.OverdraftFee), TransactionType.Fee_Overdraft);
        }

        return true;

        void Add(double amount, TransactionType transactionType)
        {
            var transaction = new Transaction(transactionType, amount, DateTime.Now);
            Transactions.Add(transaction);
        }
    }
}